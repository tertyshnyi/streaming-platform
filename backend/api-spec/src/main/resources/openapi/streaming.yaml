openapi: 3.0.1
info:
  title: User API
  description: API for streaming platform
  version: 1.0.0

paths:
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        description: New user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUserById
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      summary: Delete user by ID
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /users/login:
    post:
      summary: Login a user
      operationId: loginUser
      tags:
        - User
      requestBody:
        required: true
        description: User login credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login, JWT token returned
          content:
            application/json:
              schema:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid credentials

components:
  schemas:
    Authority:
      type: string
      enum:
        - USER
        - RELEASER
        - MODERATOR
        - ADMIN

    CreateUser:
      type: object
      required:
        - name
        - email
        - password
        - phoneNumber
      properties:
        name:
          type: string
          description: User's name
          example: "John Doe"
        email:
          type: string
          description: User's email
          example: "johndoe@example.com"
        password:
          type: string
          description: User's password
          example: "password123"
        phoneNumber:
          type: string
          description: User's phone number
          example: "+1234567890"
        profileImg:
          type: string
          description: User's profile image URL
          example: "https://example.com/profile.jpg"

    User:
      type: object
      required:
        - id
        - name
        - email
        - phoneNumber
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: User ID (auto-generated by the server)
          example: 1
        name:
          type: string
          description: User's name
          example: "John Doe"
        email:
          type: string
          description: User's email
          example: "johndoe@example.com"
        phoneNumber:
          type: string
          description: User's phone number
          example: "+1234567890"
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/Authority'
          description: User roles
          example:
            - "USER"
        profileImg:
          type: string
          description: User's profile image URL
          example: "https://example.com/profile.jpg"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: "2025-04-08T12:00:00Z"

    LoginRequest:
      type: object
      required:
        - emailOrPhone
        - password
      properties:
        emailOrPhone:
          type: string
          description: User's email or phone number
          example: "johndoe@example.com"
        password:
          type: string
          description: User's password
          example: "password123"
